// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  avatar    String?
  role      UserRole @default(MEMBER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects      Project[]
  assignedTasks Task[]

  @@index([email])
  @@index([isActive])
}

enum UserRole {
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Foreign keys
  ownerId String

  // Relations
  owner User   @relation(fields: [ownerId], references: [id])
  tasks Task[]

  @@index([ownerId])
  @@index([status])
  @@index([startDate])
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Foreign keys
  projectId  String
  assigneeId String?

  // Relations
  project  Project @relation(fields: [projectId], references: [id])
  assignee User?   @relation(fields: [assigneeId], references: [id])

  // Task relationships
  dependencies TaskDependency[] @relation("TaskDependencies")
  dependents   TaskDependency[] @relation("TaskDependents")

  // Indexes for performance
  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
  @@index([dueDate])
}

model TaskDependency {
  id             String         @id @default(cuid())
  taskId         String
  dependsOnId    String
  dependencyType DependencyType @default(BLOCKS)
  createdAt      DateTime       @default(now())

  // Relations
  task      Task @relation("TaskDependencies", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOn Task @relation("TaskDependents", fields: [dependsOnId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([taskId, dependsOnId])
  @@index([taskId])
  @@index([dependsOnId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DependencyType {
  BLOCKS
  DEPENDS_ON
  RELATED
  DUPLICATE
}
